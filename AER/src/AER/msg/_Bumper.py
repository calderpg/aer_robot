"""autogenerated by genmsg_py from Bumper.msg. Do not edit."""
import roslib.message
import struct


class Bumper(roslib.message.Message):
  _md5sum = "eeed7b8718df4f012a61cb0f64370c84"
  _type = "AER/Bumper"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 bumper1
int32 bumper2
int32 bumper3
int32 bumper4
int32 bumper5
int32 bumper6
int32 bumper7
int32 bumper8

"""
  __slots__ = ['bumper1','bumper2','bumper3','bumper4','bumper5','bumper6','bumper7','bumper8']
  _slot_types = ['int32','int32','int32','int32','int32','int32','int32','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       bumper1,bumper2,bumper3,bumper4,bumper5,bumper6,bumper7,bumper8
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(Bumper, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bumper1 is None:
        self.bumper1 = 0
      if self.bumper2 is None:
        self.bumper2 = 0
      if self.bumper3 is None:
        self.bumper3 = 0
      if self.bumper4 is None:
        self.bumper4 = 0
      if self.bumper5 is None:
        self.bumper5 = 0
      if self.bumper6 is None:
        self.bumper6 = 0
      if self.bumper7 is None:
        self.bumper7 = 0
      if self.bumper8 is None:
        self.bumper8 = 0
    else:
      self.bumper1 = 0
      self.bumper2 = 0
      self.bumper3 = 0
      self.bumper4 = 0
      self.bumper5 = 0
      self.bumper6 = 0
      self.bumper7 = 0
      self.bumper8 = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self
      buff.write(_struct_8i.pack(_x.bumper1, _x.bumper2, _x.bumper3, _x.bumper4, _x.bumper5, _x.bumper6, _x.bumper7, _x.bumper8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.bumper1, _x.bumper2, _x.bumper3, _x.bumper4, _x.bumper5, _x.bumper6, _x.bumper7, _x.bumper8,) = _struct_8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self
      buff.write(_struct_8i.pack(_x.bumper1, _x.bumper2, _x.bumper3, _x.bumper4, _x.bumper5, _x.bumper6, _x.bumper7, _x.bumper8))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.bumper1, _x.bumper2, _x.bumper3, _x.bumper4, _x.bumper5, _x.bumper6, _x.bumper7, _x.bumper8,) = _struct_8i.unpack(str[start:end])
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
_struct_8i = struct.Struct("<8i")
